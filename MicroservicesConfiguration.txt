MICROSERVICES CONFIGURATION
---------------------------

configurations like
	- database connections
	- credentials
	- feature flags
	- business logic configuration parameters
	- scenario testing
	- spring boot configuration
	
types of configuration files
	xml
	properties
	yaml
	json
	
a configuration file should be -
	- externalized
	- environment specific
	- consistent
	- version history
	- real-time management

Ways of configuring the Spring boot application:
	1. application.properties - using @Value annotation
		- this way configuration is not really externalized.
		- this can be overwritten by an application.properties file in the same same location as of the jar
		- which can further be overwridden by command line arguments to the spring boot application jar.
		e.g. @Value("${property.key: default value}")
		- we can also use Spring Expression Language (SPL) in @Value annotation.
	2. @ConfigurationProperties - to get a group of configuration properties in one go
		- create a bean class with member variables to hold the properties.
		- anotate the bean class with @Configuration and @ConfigurationProperties("someprefeixKey")
		- add the deifferent properties value in the application.properties file as below.
		e.g. someprefeixKey.property1=someValue
		e.g. someprefeixKey.property2=someValue2
		- autowire the bean where the properties of the bean is needed
		- advantages:
			1. get the type safety
			2. get a grooup of configuration properties in one go
			3. if the configuration property is getting used at more than one place in then it is benefitial to use autowired bean instead of adding the @Value annotation each single place
	3. actuator
		- some configurations are pre available in the spring application for the user to configure the way in which application behaves
		- actuator exposes some endpoint of the application
		- to do this add the dependency spring-boot-starter-actuater
		- add the property management.endpoints.web.exposure.include=<> in the application.properties
		e.g. management.endpoints.web.exposure.include=*
		- you can see all the properties exposed by the url localhost:8080/actuator/configprops
		
	4. YAML (Yet Another Markup Language)
		application.yml
		- somewhat like JSON properties
		- supports nesting
		e.g.
		
			db:
				connection:
					url: "dburl"
				host:127.0.0.1
				port:1200
				
		- these properties can be accessed as before like,
			db.connection.url
			d.port
	
	5. Spring Propfiles
		- a set of configuration properties to create a profile
		- default profile is active by default (application.properties)
		- to create a new custom spring profile create a configuration file with syntax as below
		- application-<profileName>.ext
		- add the property "spring.profiles.active=profileName" in default profile to activate the configuration of specific profile
		- this setting / property can be over-ridden by command line argument to activate different profile as and when required.
		- this way gives the environment specific feature to the configuration file and allows to have different set of configuration values for different environments
	
		5.1. Selecting beans by profile
			- help to point / handle different resources / schema / code-flow based on the current profile
			- @Profile annotation on top of bean to indetify the bean for a specific profile.
			e.g. @Profile("dev")
	
	6. Using Ennvironment Object (NOT AT ALL RECOMENDED)
		"Environment" is a bean that we can inject to the application and then access the configuration values using it.
		
		@Autowired
		private Environment env;
		
		env.toString(); - to print all the things environment object can offer.
		env.getActiveProfiles(); - to get the list of active profiles
		env.getProperty(); - to get the value of any property
		
		using Environment object gives control to look up properties and profiles


SPRING CLOUD CONFIG SERVER
	From single service to multiple microservices
	- to achive consistancy working with multiple microservices, we can introduce a separate service as configuration provider.
	- there are various different options for adding a configuration service to a bunch of microservices-
		1. Apache Zookeeper
		2. ETCD - didtributed key value store
		3. Hashicorp Consul
		4. Spring Cloud Configuration Server
	- here we will learn to use Spring Cloud configuration Server
	- Spring Cloud Configuration Server can look the values of the configurations from a GIT / SVN repo (This way we can achive a version control on our configurations)
	
	Setting up Spring Cloud Config Server:
	
	- create a new spring application with dependency "spring-cloud-starter-netflix-eureka-server".
	- add annotation @EnableConfigServer to the main class of the config server
	- in the application.properties add the property add the property "spring.cloud.config.server.git.uri" to point to your repo
	- use the url localhost:portOfConfigServer/<fileNameIntheRepo>/<profileName>
	e.g. http://localhost:8888/application/default
	
	now we have make other microservices as client of spring-cloud-config-server which is going to pull the configuration from the config server
	
	- add the dependency "spring-cloud-starter-config" in your existing microservices
	- in application.properties of the microservice add the property "spring.cloud.config.uri" to point to the spring-cloud-config-server
	
	by doing the above, the microservice will pull the configuration from application.properties/yml file in the GIT repo
	this "application" and its profiles will be global to all clients of the config server.
	
	to add a microservice specific configuration file add a separate file <microserviceName>.properties/yml in the GIT repo
	this way only that microservice will pull values from that file
	Note: MicroserviceName is the name of the application can be defined by the property "spring.application.name".
	
	Now to enable real-time management:
	Why?
		- The spring cloud config server is always updated and takes value from the repo, without the need of restarting the server
		- The clients do not always look for updated config. The clients keep a cache of the configuration. To update the configuration for the client, it needs to be restarted.
	To update the configurations for the clients without restarting the client service
		- add the dependency "spring-boot-starter-actuater"
		- mark the components (classes/beans) which needs to be refreshed (and not cached) with annotation @RefreshScope
		- this actuator exposes a refresh endpoint, which can be called to refresh the components which are marked for refresh
		- to call the refresh send a POST request to the client microservice with url like localhost:8080/actuator/refresh (add header Content-type=application/json)
	
	Note: Not all the configurations are updated. Only the components marked with @RefreshScope are refreshed dynamically. We need to call the refresh endpoint to the get the configurations refreshed.
	

CONFIGURATION STRATEGIES:
	1. 	configuration is microservice specific not likely to change
		= Property File
	2. configuration is microservice specific likely to change
		= Config Server
	3. 	configuration is microservice specific and is environment specific
		= System variable with alias
		
Security of spring cloud config server
	1. we can use spring cloud security to allow only authenticated microservices to access the configuration server
	2. we can scure the GIT/SVN repo where the configuration is to allow only to limited users.
	3. use encrypted value and not plain text to keep sensitive information in the repo. Spring cloud config server can encrypt and decrypt values